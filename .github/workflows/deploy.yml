name: CI/CD to Kubernetes

on:
  push:
    # Запускать пайплайн при пуше в ветку main (или master, если вы ее используете)
    branches:
      - main
  workflow_dispatch:
    # Позволяет запускать вручную из интерфейса GitHub

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # Объявление переменных, чтобы не повторять их в скриптах
    env:
      DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/ludic-bot
      TAG: ${{ github.sha }}  # Используем SHA коммита как уникальный тег
      K8S_DEPLOYMENT_NAME: ludic-bot-deployment

    steps:
    - name: 1. Checkout Code
      uses: actions/checkout@v4

    # =======================================================
    # СЕКЦИЯ DOCKER (Сборка и Пуш)
    # =======================================================
    - name: 2. Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 3. Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 4. Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ env.TAG }}
        # Используем Dockerfile, который мы создали ранее
        file: ./Dockerfile
        
    # =======================================================
    # СЕКЦИЯ KUBERNETES (Деплой)
    # =======================================================
    - name: 5. Set up Kubeconfig (Base64 Decode)
      # Декодируем секрет KUBECONFIG_B64 и сохраняем его в файл
      run: |
        echo "${{ secrets.KUBECONFIG_B64 }}" | base64 -d > $HOME/.kube/config
        
    - name: 6. Install kubectl
      uses: azure/setup-kubectl@v3
      
    - name: 7. Deploy to K8s
      # Используем kubectl для применения манифеста.
      # Мы также обновим образ, чтобы гарантировать, что K8s подтянет новую версию.
      run: |
        # Применяем манифест (убедитесь, что deployment.yaml есть в корне проекта)
        kubectl apply -f deployment.yaml

        # Обязательный шаг: принудительное обновление образа в Deployment
        # Это гарантирует, что K8s загрузит новый тег :latest или :<sha>
        kubectl set image deployment/${{ env.K8S_DEPLOYMENT_NAME }} ludic-bot=${{ env.DOCKER_IMAGE }}:${{ env.TAG }}
        
        # Проверяем статус развертывания
        kubectl rollout status deployment/${{ env.K8S_DEPLOYMENT_NAME }}
