(function(){
  const tg = window.Telegram.WebApp;
  try { tg.expand(); } catch(e){}
  const matchesEl = document.getElementById('matches');
  const refreshBtn = document.getElementById('refresh');
  const closeBtn = document.getElementById('close');

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è initData –∏–∑ Telegram Web App
  function getInitData() {
    return tg.initData || '';
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  function showNotification(message, isError = false) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      left: 50%;
      transform: translateX(-50%);
      padding: 12px 20px;
      background: ${isError ? '#f44336' : '#4CAF50'};
      color: white;
      border-radius: 8px;
      z-index: 1000;
      box-shadow: 0 4px 12px rgba(0,0,0,0.3);
      font-size: 14px;
      max-width: 80%;
      text-align: center;
    `;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification);
      }
    }, 5000);
  }

  async function loadMatches(){
    matchesEl.innerHTML = '‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...';
    try{
      // –ü–æ–ª—É—á–∞–µ–º initData –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const initData = getInitData();
      
      const resp = await fetch('/api/matches', {
        headers: {
          'X-Telegram-Init-Data': initData
        }
      });
      
      if(!resp.ok) {
        if (resp.status === 401) {
          throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.');
        }
        throw new Error('Network response not ok');
      }
      
      const data = await resp.json();
      const matches = data.data || [];
      
      if(matches.length === 0){
        matchesEl.innerHTML = '<div class="match">‚öΩ –ù–µ—Ç –º–∞—Ç—á–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞</div>';
        return;
      }
      
      matchesEl.innerHTML = matches.map(m => {
        const league = (m.league && m.league.name) || '‚Äî';
        const home = (m.teams && m.teams.home && m.teams.home.name) || 'Home';
        const away = (m.teams && m.teams.away && m.teams.away.name) || 'Away';
        const time = m.time || '';
        const scoreHome = m.scores && m.scores.home !== null ? m.scores.home : '';
        const scoreAway = m.scores && m.scores.away !== null ? m.scores.away : '';
        
        const scoreText = (scoreHome !== '' && scoreAway !== '') 
          ? `<div class="score">${scoreHome} - ${scoreAway}</div>` 
          : '';
        
        return `
          <div class="match">
            <div class="league">${league}</div>
            <div class="vs">‚öΩ ${home} ‚Äî ${away}</div>
            ${scoreText}
            <div class="time">üïí ${time}</div>
          </div>
        `;
      }).join('');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      showNotification(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${matches.length} –º–∞—Ç—á–µ–π`);
      
    } catch(e) {
      console.error('Error loading matches:', e);
      let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π';
      
      if (e.message.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')) {
        errorMessage = '‚ùå ' + e.message;
      }
      
      matchesEl.innerHTML = `<div class="match error">${errorMessage}</div>`;
      showNotification(errorMessage, true);
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  refreshBtn.addEventListener('click', loadMatches);
  
  closeBtn.addEventListener('click', () => { 
    try { 
      tg.close(); 
    } catch(e) {
      console.log('Cannot close WebApp:', e);
      showNotification('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ Telegram', false);
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ Telegram
  tg.BackButton.show();
  tg.BackButton.onClick(() => {
    tg.close();
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  function displayUserInfo() {
    const user = tg.initDataUnsafe.user;
    if (user) {
      console.log('User info:', user);
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
      const userInfo = document.createElement('div');
      userInfo.style.cssText = 'text-align: center; margin-bottom: 10px; font-size: 12px; color: #666;';
      userInfo.textContent = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!`;
      matchesEl.parentNode.insertBefore(userInfo, matchesEl);
    }
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram Web App
    if (!tg.initData) {
      matchesEl.innerHTML = '<div class="match error">–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram</div>';
      return;
    }
    
    displayUserInfo();
    loadMatches();
  });

  // Initial load
  loadMatches();
})();
