import os
import logging
import threading
import asyncio
from datetime import datetime, timedelta
import hmac
import hashlib
import json
import random
from typing import Dict, List, Optional

import requests
from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
import uvicorn

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeAllGroupChats
from aiogram.enums import ChatType

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_SPORT_KEY = os.getenv("API_SPORT_KEY")
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
if not API_SPORT_KEY:
    raise RuntimeError("API_SPORT_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
log = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ú–ï–ù–Æ –ë–û–¢–ê ---
async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="matches", description="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏"),
        BotCommand(command="live", description="üì° Live-–º–∞—Ç—á–∏"),
        BotCommand(command="bet", description="üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞"),
        BotCommand(command="league", description="üèÜ –í—ã–±–æ—Ä –ª–∏–≥–∏"),
        BotCommand(command="stats", description="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤"),
        BotCommand(command="table", description="üìä –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"),
        BotCommand(command="favorite", description="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"),
        BotCommand(command="notify", description="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
        BotCommand(command="menu", description="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

async def set_group_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –≥—Ä—É–ø–ø"""
    commands = [
        BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="matches", description="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏"),
        BotCommand(command="bet", description="üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞"),
        BotCommand(command="menu", description="üì± –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeAllGroupChats())

app = FastAPI()

# --- –•–†–ê–ù–ò–õ–ò–©–ê –î–ê–ù–ù–´–• ---
user_favorites: Dict[int, List[str]] = {}
user_notifications: Dict[int, bool] = {}
user_settings: Dict[int, Dict] = {}

# --- –ü–†–ï–î–û–ü–†–ï–î–ï–õ–ï–ù–ù–´–ï –õ–ò–ì–ò ---
POPULAR_LEAGUES = {
    "premier_league": {"id": 1, "name": "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞", "country": "–ê–Ω–≥–ª–∏—è", "emoji": "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø"},
    "la_liga": {"id": 2, "name": "üá™üá∏ –õ–∞ –õ–∏–≥–∞", "country": "–ò—Å–ø–∞–Ω–∏—è", "emoji": "üá™üá∏"},
    "serie_a": {"id": 3, "name": "üáÆüáπ –°–µ—Ä–∏—è –ê", "country": "–ò—Ç–∞–ª–∏—è", "emoji": "üáÆüáπ"},
    "bundesliga": {"id": 4, "name": "üá©üá™ –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞", "country": "–ì–µ—Ä–º–∞–Ω–∏—è", "emoji": "üá©üá™"},
    "ligue_1": {"id": 5, "name": "üá´üá∑ –õ–∏–≥–∞ 1", "country": "–§—Ä–∞–Ω—Ü–∏—è", "emoji": "üá´üá∑"},
    "rpl": {"id": 6, "name": "üá∑üá∫ –†–ü–õ", "country": "–†–æ—Å—Å–∏—è", "emoji": "üá∑üá∫"},
    "champions_league": {"id": 7, "name": "üèÜ –õ–∏–≥–∞ –ß–µ–º–ø–∏–æ–Ω–æ–≤", "country": "–ï–≤—Ä–æ–ø–∞", "emoji": "üèÜ"},
    "europa_league": {"id": 8, "name": "ü•à –õ–∏–≥–∞ –ï–≤—Ä–æ–ø—ã", "country": "–ï–≤—Ä–æ–øa", "emoji": "ü•à"}
}

# --- –î–ê–ù–ù–´–ï –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
STATS_DATA = {
    "scorers": [
        {"name": "–ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É", "team": "–ê–ª—å-–ù–∞—Å—Ä", "goals": 25, "assists": 7, "emoji": "üëë"},
        {"name": "–õ–∏–æ–Ω–µ–ª—å –ú–µ—Å—Å–∏", "team": "–ò–Ω—Ç–µ—Ä –ú–∞–π–∞–º–∏", "goals": 22, "assists": 14, "emoji": "‚≠ê"},
        {"name": "–†–æ–±–µ—Ä—Ç –õ–µ–≤–∞–Ω–¥–æ–≤—Å–∫–∏–π", "team": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "goals": 20, "assists": 5, "emoji": "üî•"},
        {"name": "–ö–∏–ª–∏–∞–Ω –ú–±–∞–ø–ø–µ", "team": "–ü–°–ñ", "goals": 19, "assists": 8, "emoji": "‚ö°"},
        {"name": "–≠—Ä–ª–∏–Ω–≥ –•–æ–ª–∞–Ω–Ω–¥", "team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "goals": 18, "assists": 6, "emoji": "üí•"},
    ],
    "assists": [
        {"name": "–ö–µ–≤–∏–Ω –î–µ –ë—Ä—ë–π–Ω–µ", "team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "assists": 16, "goals": 5, "emoji": "üéØ"},
        {"name": "–õ–∏–æ–Ω–µ–ª—å –ú–µ—Å—Å–∏", "team": "–ò–Ω—Ç–µ—Ä –ú–∞–π–∞–º–∏", "assists": 14, "goals": 22, "emoji": "‚≠ê"},
        {"name": "–¢–æ–Ω–∏ –ö—Ä–æ–æ—Å", "team": "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "assists": 12, "goals": 3, "emoji": "üé©"},
        {"name": "–ë—Ä—É–Ω—É –§–µ—Ä–Ω–∞–Ω–¥–µ—à", "team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", "assists": 11, "goals": 8, "emoji": "üîÆ"},
        {"name": "–¢—Ä–µ–Ω—Ç –ê–ª–µ–∫—Å–∞–Ω–¥–µ—Ä-–ê—Ä–Ω–æ–ª—å–¥", "team": "–õ–∏–≤–µ—Ä–ø—É–ª—å", "assists": 10, "goals": 2, "emoji": "üéØ"},
    ],
    "discipline": [
        {"name": "–ù–∏–∫–æ–ª–∞ –ú–∏–ª–µ–Ω–∫–æ–≤–∏—á", "team": "–§–∏–æ—Ä–µ–Ω—Ç–∏–Ω–∞", "yellow": 12, "red": 2, "emoji": "üí•"},
        {"name": "–≠—Ä–∏–∫ –ë–∞–π–∏", "team": "–°–µ–≤–∏–ª—å—è", "yellow": 10, "red": 1, "emoji": "‚ö°"},
        {"name": "–ñ–æ–∞—É –ö–∞–Ω—Å–µ–ª—É", "team": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "yellow": 9, "red": 1, "emoji": "üî¥"},
        {"name": "–ö–∞–∑—É—è –Ø–º–∞–º–æ—Ç–æ", "team": "–û—Å–∞–∫–∞", "yellow": 8, "red": 2, "emoji": "üí¢"},
        {"name": "–ê–ª–µ—Ö–∞–Ω–¥—Ä–æ –ì–∞—Ä–Ω–∞—á–æ", "team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –Æ–Ω–∞–π—Ç–µ–¥", "yellow": 8, "red": 1, "emoji": "‚ö°"},
    ],
    "defense": [
        {"name": "–Ø–Ω –û–±–ª–∞–∫", "team": "–ê—Ç–ª–µ—Ç–∏–∫–æ –ú–∞–¥—Ä–∏–¥", "clean_sheets": 15, "saves": 87, "emoji": "üõ°Ô∏è"},
        {"name": "–ê–ª–∏—Å—Å–æ–Ω –ë–µ–∫–∫–µ—Ä", "team": "–õ–∏–≤–µ—Ä–ø—É–ª—å", "clean_sheets": 14, "saves": 92, "emoji": "üåü"},
        {"name": "–ú–∞–Ω—É—ç–ª—å –ù–æ–π–µ—Ä", "team": "–ë–∞–≤–∞—Ä–∏—è", "clean_sheets": 13, "saves": 78, "emoji": "üß§"},
        {"name": "–¢–∏–±–æ –ö—É—Ä—Ç—É–∞", "team": "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "clean_sheets": 12, "saves": 85, "emoji": "‚≠ê"},
        {"name": "–≠–¥–µ—Ä—Å–æ–Ω", "team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "clean_sheets": 11, "saves": 67, "emoji": "‚ö°"},
    ]
}

# --- –¢–£–†–ù–ò–†–ù–´–ï –¢–ê–ë–õ–ò–¶–´ ---
LEAGUE_TABLES = {
    "premier_league": [
        {"position": 1, "team": "–ê—Ä—Å–µ–Ω–∞–ª", "points": 74, "games": 30, "form": "WWLWW"},
        {"position": 2, "team": "–ú–∞–Ω—á–µ—Å—Ç–µ—Ä –°–∏—Ç–∏", "points": 73, "games": 30, "form": "WWWDW"},
        {"position": 3, "team": "–õ–∏–≤–µ—Ä–ø—É–ª—å", "points": 72, "games": 30, "form": "WWLWD"},
        {"position": 4, "team": "–ê—Å—Ç–æ–Ω –í–∏–ª–ª–∞", "points": 63, "games": 30, "form": "WLWWW"},
        {"position": 5, "team": "–¢–æ—Ç—Ç–µ–Ω—Ö—ç–º", "points": 60, "games": 30, "form": "WLLWD"},
    ],
    "la_liga": [
        {"position": 1, "team": "–†–µ–∞–ª –ú–∞–¥—Ä–∏–¥", "points": 78, "games": 30, "form": "WWWWW"},
        {"position": 2, "team": "–ë–∞—Ä—Å–µ–ª–æ–Ω–∞", "points": 70, "games": 30, "form": "WWLWD"},
        {"position": 3, "team": "–ñ–∏—Ä–æ–Ω–∞", "points": 65, "games": 30, "form": "WLLWW"},
        {"position": 4, "team": "–ê—Ç–ª–µ—Ç–∏–∫–æ –ú–∞–¥—Ä–∏–¥", "points": 61, "games": 30, "form": "WLWWL"},
        {"position": 5, "team": "–ê—Ç–ª–µ—Ç–∏–∫ –ë–∏–ª—å–±–∞–æ", "points": 56, "games": 30, "form": "WWDDW"},
    ]
}

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–ù–î–û–ú–ù–û–ô –°–¢–ê–í–ö–ò ---
def get_random_bet_match():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–∞—Ç—á–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞"""
    try:
        today = datetime.utcnow().strftime("%Y-%m-%d")
        params = {"date": today}
        headers = {"Authorization": API_SPORT_KEY}
        
        url = "https://api.api-sport.ru/v1/football/matches"
        resp = requests.get(url, headers=headers, params=params, timeout=10)
        
        if resp.status_code != 200:
            return None
            
        data = resp.json()
        matches = data.get("matches", [])
        
        if not matches:
            return None
        
        now_utc = datetime.utcnow()
        now_msk = now_utc + timedelta(hours=3)
        one_hour_later_msk = now_msk + timedelta(hours=1)
        
        eligible_matches = []
        for match in matches:
            start_timestamp = match.get("startTimestamp")
            if start_timestamp:
                start_time_utc = datetime.fromtimestamp(start_timestamp / 1000)
                start_time_msk = start_time_utc + timedelta(hours=3)
                
                if now_msk <= start_time_msk <= one_hour_later_msk:
                    eligible_matches.append(match)
        
        if not eligible_matches:
            return None
        
        random_match = random.choice(eligible_matches)
        
        bet_options = [
            {"type": "–ü1", "text": f"–ü1 - –ø–æ–±–µ–¥–∞ {random_match.get('homeTeam', {}).get('name', '—Ö–æ–∑—è–µ–≤')}", "emoji": "üè†"},
            {"type": "–ü2", "text": f"–ü2 - –ø–æ–±–µ–¥–∞ {random_match.get('awayTeam', {}).get('name', '–≥–æ—Å—Ç–µ–π')}", "emoji": "‚úàÔ∏è"},
            {"type": "–•", "text": "–• - –Ω–∏—á—å—è", "emoji": "ü§ù"},
            {"type": "–¢–ë", "text": "–¢–ë 2.5 - —Ç–æ—Ç–∞–ª –±–æ–ª—å—à–µ 2.5 –≥–æ–ª–æ–≤", "emoji": "üìà"},
            {"type": "–¢–ú", "text": "–¢–ú 2.5 - —Ç–æ—Ç–∞–ª –º–µ–Ω—å—à–µ 2.5 –≥–æ–ª–æ–≤", "emoji": "üìâ"},
            {"type": "–û–ó", "text": "–û–±–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–±—å—é—Ç - –î–ê", "emoji": "‚öΩ‚öΩ"},
            {"type": "–û–ó", "text": "–û–±–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–±—å—é—Ç - –ù–ï–¢", "emoji": "üö´"}
        ]
        
        random_bet = random.choice(bet_options)
        
        return {
            "match": random_match,
            "bet": random_bet,
            "confidence": random.randint(65, 95)
        }
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –≤ get_random_bet_match: {e}")
        return None

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
def get_top_scorers(limit=5):
    return STATS_DATA["scorers"][:limit]

def get_top_assists(limit=5):
    return STATS_DATA["assists"][:limit]

def get_discipline_stats(limit=5):
    return STATS_DATA["discipline"][:limit]

def get_defense_stats(limit=5):
    return STATS_DATA["defense"][:limit]

def get_league_table(league_key):
    return LEAGUE_TABLES.get(league_key, [])

# --- –ü–†–û–í–ï–†–ö–ê INITDATA ---
def validate_init_data(init_data: str) -> bool:
    try:
        pairs = init_data.split('&')
        data_dict = {}
        hash_value = None
        
        for pair in pairs:
            key, value = pair.split('=', 1)
            if key == 'hash':
                hash_value = value
            else:
                data_dict[key] = value
        
        if not hash_value:
            return False
        
        check_string = '\n'.join([f"{k}={data_dict[k]}" for k in sorted(data_dict.keys())])
        
        secret_key = hmac.new(
            key=b"WebAppData",
            msg=TELEGRAM_BOT_TOKEN.encode(),
            digestmod=hashlib.sha256
        ).digest()
        
        calculated_hash = hmac.new(
            key=secret_key,
            msg=check_string.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()
        
        return calculated_hash == hash_value
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ initData: {e}")
        return False

# --- –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ WEB APP ---
@app.get("/")
def index():
    return FileResponse("app/webapp/index.html")

@app.get("/style.css")
def style():
    return FileResponse("app/webapp/style.css")

@app.get("/app.js")
def app_js():
    return FileResponse("app/webapp/app.js")

# --- API –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
@app.get("/api/stats/scorers")
def api_stats_scorers():
    try:
        scorers = get_top_scorers(10)
        return JSONResponse(content={"data": scorers})
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/api/stats/assists")
def api_stats_assists():
    try:
        assists = get_top_assists(10)
        return JSONResponse(content={"data": assists})
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/api/stats/discipline")
def api_stats_discipline():
    try:
        discipline = get_discipline_stats(10)
        return JSONResponse(content={"data": discipline})
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/api/stats/defense")
def api_stats_defense():
    try:
        defense = get_defense_stats(10)
        return JSONResponse(content={"data": defense})
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# --- –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ú–ê–¢–ß–ê–• ---
def get_matches_data_extended(date=None, status=None, tournament_id=None, team_id=None):
    try:
        if date is None:
            date = datetime.utcnow().strftime("%Y-%m-%d")
        
        params = {"date": date}
        
        if status:
            params["status"] = status
        if tournament_id:
            params["tournament_id"] = tournament_id
        if team_id:
            params["team_id"] = team_id
        
        headers = {"Authorization": API_SPORT_KEY}
        url = "https://api.api-sport.ru/v1/football/matches"
        
        resp = requests.get(url, headers=headers, params=params, timeout=10)
        
        if resp.status_code != 200:
            return JSONResponse(
                status_code=resp.status_code,
                content={"error": f"–û—à–∏–±–∫–∞ API: {resp.status_code}"}
            )
        
        data = resp.json()
        matches = data.get("matches", [])
        
        if status == 'inprogress':
            filtered_matches = matches
        else:
            now_utc = datetime.utcnow()
            now_msk = now_utc + timedelta(hours=3)
            two_hours_later_msk = now_msk + timedelta(hours=2)
            
            filtered_matches = []
            for match in matches:
                start_timestamp = match.get("startTimestamp")
                if start_timestamp:
                    start_time_utc = datetime.fromtimestamp(start_timestamp / 1000)
                    start_time_msk = start_time_utc + timedelta(hours=3)
                    
                    if now_msk <= start_time_msk <= two_hours_later_msk:
                        filtered_matches.append(match)
        
        return JSONResponse(content={
            "data": filtered_matches,
            "total": len(filtered_matches),
            "today_total": len(matches)
        })
        
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –≤ get_matches_data_extended")
        return JSONResponse(status_code=500, content={"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"})

def get_matches_data():
    return get_matches_data_extended()

# --- API ENDPOINTS ---
@app.get("/api/matches")
def api_matches(request: Request):
    try:
        init_data = request.headers.get("X-Telegram-Init-Data")
        if not init_data or not validate_init_data(init_data):
            return JSONResponse(status_code=401, content={"error": "–ù–µ–≤–µ—Ä–Ω—ã–π initData"})
        return get_matches_data_extended()
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/api/internal/matches")
def api_internal_matches():
    try:
        return get_matches_data_extended()
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/api/internal/matches/live")
def api_internal_matches_live():
    try:
        return get_matches_data_extended(status='inprogress')
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/api/internal/matches/league/{league_id}")
def api_internal_matches_league(league_id: int):
    try:
        return get_matches_data_extended(tournament_id=league_id)
    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

# --- –£–õ–£–ß–®–ï–ù–ù–´–ô –í–ò–ó–£–ê–õ - –§–£–ù–ö–¶–ò–ò –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ---
def format_match_message(match_data, is_live=False):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–∞—Ç—á–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª–æ–º"""
    tournament = match_data.get("tournament", {})
    league = tournament.get("name", "‚Äî")
    
    home_team = match_data.get("homeTeam", {})
    away_team = match_data.get("awayTeam", {})
    home_name = home_team.get("name", "Home")
    away_name = away_team.get("name", "Away")
    
    start_timestamp = match_data.get("startTimestamp")
    if start_timestamp:
        start_time_utc = datetime.fromtimestamp(start_timestamp / 1000)
        start_time_msk = start_time_utc + timedelta(hours=3)
        time_str = start_time_msk.strftime("%H:%M –ú–°–ö")
    else:
        time_str = "‚Äî"
    
    if is_live:
        home_score = match_data.get("homeScore", {}).get("current", 0)
        away_score = match_data.get("awayScore", {}).get("current", 0)
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
        status_emoji = "üî¥"
        if home_score > away_score:
            status_emoji = "üîµ"
        elif away_score > home_score:
            status_emoji = "üü°"
        else:
            status_emoji = "‚ö™"
        
        return (
            f"{status_emoji} *LIVE: {league}*\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üè† *{home_name}*   {home_score} - {away_score}   *{away_name}* ‚úàÔ∏è\n"
            f"‚è∞ *–í—Ä–µ–º—è:* {time_str}\n"
            f"üéØ *–°—Ç–∞—Ç—É—Å:* –ú–∞—Ç—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
        )
    else:
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –º–∞—Ç—á–∞
        time_emoji = "üïí"
        if start_timestamp:
            time_diff = (start_time_msk - (datetime.utcnow() + timedelta(hours=3))).total_seconds() / 60
            if time_diff < 30:
                time_emoji = "üîú"
            elif time_diff < 60:
                time_emoji = "‚è≥"
        
        return (
            f"‚öΩ *{league}*\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            f"üè† *{home_name}*   vs   *{away_name}* ‚úàÔ∏è\n"
            f"{time_emoji} *–ù–∞—á–∞–ª–æ:* {time_str}"
        )

def format_stats_message(stats_type, data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª–æ–º"""
    titles = {
        "scorers": "ü•Ö –¢–æ–ø-5 –±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤",
        "assists": "üÖ∞Ô∏è –¢–æ–ø-5 –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤", 
        "discipline": "üü®üü• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã",
        "defense": "üß§ –õ—É—á—à–∏–µ –≤—Ä–∞—Ç–∞—Ä–∏"
    }
    
    text = f"*{titles.get(stats_type, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')}*\n"
    text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    for i, player in enumerate(data, 1):
        emoji = player.get('emoji', 'üë§')
        if stats_type == "scorers":
            text += f"{i}. {emoji} *{player['name']}* ({player['team']})\n   ‚öΩ –ì–æ–ª—ã: {player['goals']} | üéØ –ü–∞—Å—ã: {player['assists']}\n\n"
        elif stats_type == "assists":
            text += f"{i}. {emoji} *{player['name']}* ({player['team']})\n   üéØ –ü–∞—Å—ã: {player['assists']} | ‚öΩ –ì–æ–ª—ã: {player['goals']}\n\n"
        elif stats_type == "discipline":
            text += f"{i}. {emoji} *{player['name']}* ({player['team']})\n   üü® {player['yellow']} | üü• {player['red']}\n\n"
        elif stats_type == "defense":
            text += f"{i}. {emoji} *{player['name']}* ({player['team']})\n   üß§ –°—É—Ö–∏–µ –º–∞—Ç—á–∏: {player['clean_sheets']}\n\n"
    
    text += f"üìÖ *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    return text

def format_table_message(league_name, table_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª–æ–º"""
    position_emojis = {1: "ü•á", 2: "ü•à", 3: "ü•â", 4: "4Ô∏è‚É£", 5: "5Ô∏è‚É£"}
    
    text = f"üìä *–¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ - {league_name}*\n"
    text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    for team in table_data:
        pos = team['position']
        emoji = position_emojis.get(pos, f"{pos}Ô∏è‚É£")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥—ã —Å —ç–º–æ–¥–∑–∏
        form_emojis = {
            'W': 'üü¢',  # –ø–æ–±–µ–¥–∞
            'D': 'üü°',  # –Ω–∏—á—å—è  
            'L': 'üî¥'   # –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        }
        form_display = ''.join([form_emojis.get(char, '‚ö™') for char in team.get('form', '')])
        
        text += f"{emoji} *{team['team']}*\n"
        text += f"   üìä –û—á–∫–∏: {team['points']} | üéÆ –ò–≥—Ä—ã: {team['games']}\n"
        text += f"   üìà –§–æ—Ä–º–∞: {form_display}\n\n"
    
    return text

# --- –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        await cmd_start_group(message)
    else:
        await cmd_start_private(message)

async def cmd_start_private(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    kb = InlineKeyboardBuilder()
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    kb.button(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏", callback_data="get_matches")
    kb.button(text="üì° Live-–º–∞—Ç—á–∏", callback_data="get_live")
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    kb.button(text="üé≤ –†–∞–Ω–¥–æ–º–Ω–∞—è —Å—Ç–∞–≤–∫–∞", callback_data="random_bet")
    kb.button(text="üèÜ –í—ã–±–æ—Ä –ª–∏–≥–∏", callback_data="select_league")
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    kb.button(text="üìä –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã", callback_data="tables_menu")
    kb.button(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤", callback_data="stats_menu")
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    kb.button(text="‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="favorites_menu")
    kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings_menu")
    
    kb.adjust(2, 2, 2, 2)
    
    welcome_text = (
        "‚öΩ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§—É—Ç–±–æ–ª—å–Ω—ã–π –ë–æ—Ç –õ—É–¥–∏–∫!* ‚öΩ\n\n"
        "üéØ *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ—É—Ç–±–æ–ª–∞*\n\n"
        "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏\n"  
        "‚Ä¢ üì° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏\n"
        "‚Ä¢ üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ üèÜ –ú–∞—Ç—á–∏ –ø–æ –ª–∏–≥–∞–º\n"
        "‚Ä¢ üìä –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã\n"
        "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ ‚≠ê –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:"
    )
    
    await message.answer(welcome_text, reply_markup=kb.as_markup(), parse_mode="Markdown")

async def cmd_start_group(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    kb = InlineKeyboardBuilder()
    kb.button(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", url=f"https://t.me/{(await bot.get_me()).username}?start=start")
    
    welcome_text = (
        "‚öΩ *–§—É—Ç–±–æ–ª—å–Ω—ã–π –ë–æ—Ç –õ—É–¥–∏–∫* ‚öΩ\n\n"
        "üéØ *–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ —Ñ—É—Ç–±–æ–ª–∞*\n\n"
        "‚ú® *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏\n"  
        "‚Ä¢ üì° –ü—Ä—è–º—ã–µ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏\n"
        "‚Ä¢ üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ üèÜ –ú–∞—Ç—á–∏ –ø–æ –ª–∏–≥–∞–º\n"
        "‚Ä¢ üìä –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã\n"
        "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:"
    )
    
    await message.answer(welcome_text, reply_markup=kb.as_markup(), parse_mode="Markdown")

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –≤ –≥—Ä—É–ø–ø–µ"""
    if message.chat.type in [ChatType.GROUP, ChatType.SUPERGROUP]:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚öΩ –û—Ç–∫—Ä—ã—Ç—å —Ñ—É—Ç–±–æ–ª—å–Ω—ã–π –±–æ—Ç", url=f"https://t.me/{(await bot.get_me()).username}?start=group")
        kb.button(text="üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏", callback_data="get_matches")
        kb.button(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞", callback_data="random_bet")
        kb.adjust(1, 2)
        
        await message.answer(
            "üéØ *–§—É—Ç–±–æ–ª—å–Ω—ã–π –ë–æ—Ç - –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=kb.as_markup(),
            parse_mode="Markdown"
        )
    else:
        await cmd_start_private(message)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ---
@dp.callback_query(lambda c: c.data == "get_matches")
async def process_get_matches(callback: types.CallbackQuery):
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏...")
    await cmd_matches(callback.message)

@dp.callback_query(lambda c: c.data == "get_live")
async def process_get_live(callback: types.CallbackQuery):
    await callback.answer("üì° –ò—â—É live-–º–∞—Ç—á–∏...")
    await cmd_live(callback.message)

@dp.callback_query(lambda c: c.data == "random_bet")
async def process_random_bet(callback: types.CallbackQuery):
    await callback.answer("üé≤ –ö—Ä—É—á—É –±–∞—Ä–∞–±–∞–Ω...")
    await cmd_bet(callback.message)

@dp.callback_query(lambda c: c.data == "select_league")
async def process_select_league(callback: types.CallbackQuery):
    await callback.answer("üèÜ –í—ã–±–∏—Ä–∞—é –ª–∏–≥–∏...")
    await cmd_league(callback.message)

@dp.callback_query(lambda c: c.data == "tables_menu")
async def process_tables_menu(callback: types.CallbackQuery):
    await callback.answer("üìä –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
    await cmd_table(callback.message)

@dp.callback_query(lambda c: c.data == "stats_menu")
async def process_stats_menu(callback: types.CallbackQuery):
    await callback.answer("üìà –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    await cmd_stats(callback.message)

@dp.callback_query(lambda c: c.data == "favorites_menu")
async def process_favorites_menu(callback: types.CallbackQuery):
    await callback.answer("‚≠ê –í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ...")
    await cmd_favorite(callback.message)

@dp.callback_query(lambda c: c.data == "settings_menu")
async def process_settings_menu(callback: types.CallbackQuery):
    await callback.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏...")
    await cmd_notify(callback.message)

# --- –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ---
@dp.message(Command("matches"))
async def cmd_matches(message: types.Message):
    await message.answer("üîç *–ò—â—É –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏...*", parse_mode="Markdown")
    
    try:
        internal_url = "http://127.0.0.1:8080/api/internal/matches"
        resp = requests.get(internal_url, timeout=10)
        
        if resp.status_code != 200:
            await message.answer("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç—á–∏*", parse_mode="Markdown")
            return
            
        data = resp.json().get("data", [])
        
        if not data:
            await message.answer(
                "‚öΩ *–ù–µ—Ç –º–∞—Ç—á–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã!",
                parse_mode="Markdown"
            )
            return
        
        await message.answer(f"üìÖ *–ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(data)}*", parse_mode="Markdown")
        
        for m in data[:5]:
            match_text = format_match_message(m)
            await message.answer(match_text, parse_mode="Markdown")
            
        if len(data) > 5:
            kb = InlineKeyboardBuilder()
            kb.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ç—á–∏", callback_data="show_all_matches")
            kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            kb.adjust(1)
            
            await message.answer(
                f"üìä *–ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(data)} –º–∞—Ç—á–µ–π*\n"
                f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=kb.as_markup(),
                parse_mode="Markdown"
            )
            
    except Exception as e:
        await message.answer("‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π*", parse_mode="Markdown")

@dp.message(Command("live"))
async def cmd_live(message: types.Message):
    await message.answer("üî¥ *–ò—â—É –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç—á–∏...*", parse_mode="Markdown")
    
    try:
        internal_url = "http://127.0.0.1:8080/api/internal/matches/live"
        resp = requests.get(internal_url, timeout=10)
        
        if resp.status_code != 200:
            await message.answer("‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å live-–º–∞—Ç—á–∏*", parse_mode="Markdown")
            return
            
        data = resp.json().get("data", [])
        
        if not data:
            await message.answer(
                "üî¥ *–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π*\n\n"
                "–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:\n"
                "‚Ä¢ üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏\n"
                "‚Ä¢ üé≤ –°–ª—É—á–∞–π–Ω—É—é —Å—Ç–∞–≤–∫—É\n"
                "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤",
                parse_mode="Markdown"
            )
            return
        
        await message.answer(f"üî¥ *–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(data)}*", parse_mode="Markdown")
        
        for m in data[:5]:
            match_text = format_match_message(m, is_live=True)
            await message.answer(match_text, parse_mode="Markdown")
            
    except Exception as e:
        await message.answer("‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ live-–º–∞—Ç—á–µ–π*", parse_mode="Markdown")

@dp.message(Command("bet"))
async def cmd_bet(message: types.Message):
    await message.answer("üé∞ *–ö—Ä—É—á—É –±–∞—Ä–∞–±–∞–Ω... –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–∞—Ç—á –¥–ª—è —Å—Ç–∞–≤–∫–∏!*", parse_mode="Markdown")
    
    bet_data = get_random_bet_match()
    
    if not bet_data:
        await message.answer(
            "‚ùå *–ù–µ –Ω–∞—à–µ–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å*\n\n"
            "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –º–∞—Ç—á–µ–π!",
            parse_mode="Markdown"
        )
        return
    
    match_data = bet_data["match"]
    bet = bet_data["bet"]
    confidence = bet_data["confidence"]
    
    tournament = match_data.get("tournament", {})
    league = tournament.get("name", "‚Äî")
    
    home_team = match_data.get("homeTeam", {})
    away_team = match_data.get("awayTeam", {})
    home_name = home_team.get("name", "Home")
    away_name = away_team.get("name", "Away")
    
    start_timestamp = match_data.get("startTimestamp")
    if start_timestamp:
        start_time_utc = datetime.fromtimestamp(start_timestamp / 1000)
        start_time_msk = start_time_utc + timedelta(hours=3)
        time_str = start_time_msk.strftime("%H:%M –ú–°–ö")
    else:
        time_str = "‚Äî"
    
    # –£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ç–∞–≤–æ–∫
    stake_options = [
        "üíé *–ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ:* 1-2% –æ—Ç –±–∞–Ω–∫–∞",
        "üí∞ *–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ:* 2-3% –æ—Ç –±–∞–Ω–∫–∞", 
        "üéØ *–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ:* 3-5% –æ—Ç –±–∞–Ω–∫–∞",
        "‚ö° *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ:* 5% –æ—Ç –±–∞–Ω–∫–∞"
    ]
    random_stake = random.choice(stake_options)
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    if confidence >= 90:
        confidence_emoji = "üîÆ"
    elif confidence >= 80:
        confidence_emoji = "üéØ"
    elif confidence >= 70:
        confidence_emoji = "üìä"
    else:
        confidence_emoji = "üé≤"
    
    bet_message = (
        f"üé∞ *–°–õ–£–ß–ê–ô–ù–ê–Ø –°–¢–ê–í–ö–ê*\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üèÜ *–õ–∏–≥–∞:* {league}\n"
        f"‚öΩ *–ú–∞—Ç—á:* {home_name} vs {away_name}\n"
        f"üïí *–ù–∞—á–∞–ª–æ:* {time_str}\n\n"
        f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* {bet['emoji']} {bet['text']}\n"
        f"{confidence_emoji} *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {confidence}%\n"
        f"{random_stake}\n\n"
        f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è!\n"
        f"üé≠ –ê–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å!"
    )
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üé≤ –ù–æ–≤–∞—è —Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç–∞–≤–∫–∞", callback_data="random_bet")
    kb.button(text="üìÖ –í—Å–µ –º–∞—Ç—á–∏", callback_data="get_matches")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await message.answer(bet_message, reply_markup=kb.as_markup(), parse_mode="Markdown")

@dp.message(Command("league"))
async def cmd_league(message: types.Message):
    kb = InlineKeyboardBuilder()
    
    for league_id, league_info in POPULAR_LEAGUES.items():
        kb.button(text=f"{league_info['emoji']} {league_info['name']}", callback_data=f"league_{league_id}")
    
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(2)
    
    await message.answer(
        "üèÜ *–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É*\n\n"
        "üëá –ü–æ–∫–∞–∑–∞–Ω—ã –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏–≥–∏:",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

@dp.message(Command("table"))
async def cmd_table(message: types.Message):
    kb = InlineKeyboardBuilder()
    
    kb.button(text="üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞", callback_data="table_premier_league")
    kb.button(text="üá™üá∏ –õ–∞ –õ–∏–≥–∞", callback_data="table_la_liga")
    kb.button(text="üáÆüáπ –°–µ—Ä–∏—è –ê", callback_data="table_serie_a")
    kb.button(text="üá©üá™ –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞", callback_data="table_bundesliga")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await message.answer(
        "üìä *–¢—É—Ä–Ω–∏—Ä–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã*\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã:",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

@dp.message(Command("team"))
async def cmd_team(message: types.Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "üîç *–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ*\n\n"
            "üí° *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n"
            "`/team –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥`\n"
            "`/team –ë–∞—Ä—Å–µ–ª–æ–Ω–∞`\n\n"
            "üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n"
            "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –º–∞—Ç—á–∏ –ø–æ –≤–∞—à–∏–º –ª—é–±–∏–º—ã–º –∫–æ–º–∞–Ω–¥–∞–º!",
            parse_mode="Markdown"
        )
        return
    
    await message.answer(
        "üîç *–ü–æ–∏—Å–∫ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*\n\n"
        "üöß *–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*\n"
        "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!",
        parse_mode="Markdown"
    )

@dp.message(Command("favorite"))
async def cmd_favorite(message: types.Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    
    if len(args) < 2:
        favorites = user_favorites.get(user_id, [])
        if favorites:
            fav_text = "\n".join([f"‚≠ê {team}" for team in favorites])
            await message.answer(
                f"‚≠ê *–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*\n\n"
                f"{fav_text}\n\n"
                f"üí° –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"
                f"`/favorite –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã`",
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"
                "üí° *–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:*\n"
                "`/favorite –†–µ–∞–ª –ú–∞–¥—Ä–∏–¥`\n"
                "`/favorite –ë–∞—Ä—Å–µ–ª–æ–Ω–∞`",
                parse_mode="Markdown"
            )
        return
    
    team_name = args[1]
    if user_id not in user_favorites:
        user_favorites[user_id] = []
    
    if team_name not in user_favorites[user_id]:
        user_favorites[user_id].append(team_name)
        await message.answer(
            f"‚úÖ *–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n"
            f"‚≠ê {team_name}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–∞—Ö —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            f"‚ÑπÔ∏è *–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º*\n\n"
            f"‚≠ê {team_name}",
            parse_mode="Markdown"
        )

@dp.message(Command("notify"))
async def cmd_notify(message: types.Message):
    user_id = message.from_user.id
    current_status = user_notifications.get(user_id, False)
    
    kb = InlineKeyboardBuilder()
    
    if current_status:
        kb.button(text="üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")
        status_text = "‚úÖ –≤–∫–ª—é—á–µ–Ω—ã"
        status_emoji = "üîî"
    else:
        kb.button(text="üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="enable_notifications")
        status_text = "üîï –≤—ã–∫–ª—é—á–µ–Ω—ã"
        status_emoji = "üîï"
    
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await message.answer(
        f"{status_emoji} *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏*\n\n"
        f"üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* {status_text}\n\n"
        f"üì® *–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:*\n"
        f"‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –º–∞—Ç—á–µ–π\n"
        f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        f"‚Ä¢ –í–∞–∂–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    kb = InlineKeyboardBuilder()
    
    kb.button(text="ü•Ö –õ—É—á—à–∏–µ –±–æ–º–±–∞—Ä–¥–∏—Ä—ã", callback_data="stats_scorers")
    kb.button(text="üÖ∞Ô∏è –õ—É—á—à–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", callback_data="stats_assists")
    kb.button(text="üü®üü• –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", callback_data="stats_discipline")
    kb.button(text="üß§ –õ—É—á—à–∏–µ –≤—Ä–∞—Ç–∞—Ä–∏", callback_data="stats_defense")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await message.answer(
        "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤*\n\n"
        "üëá –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–ò–ì ---
@dp.callback_query(lambda c: c.data.startswith("league_"))
async def process_league_select(callback: types.CallbackQuery):
    league_key = callback.data.replace("league_", "")
    league_info = POPULAR_LEAGUES.get(league_key)
    
    if not league_info:
        await callback.answer("‚ùå –õ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback.answer(f"üîç –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏ {league_info['name']}...")
    
    try:
        internal_url = f"http://127.0.0.1:8080/api/internal/matches/league/{league_info['id']}"
        resp = requests.get(internal_url, timeout=10)
        
        if resp.status_code != 200:
            await callback.message.answer("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π –ª–∏–≥–∏*", parse_mode="Markdown")
            return
            
        data = resp.json().get("data", [])
        
        if not data:
            await callback.message.answer(
                f"‚öΩ *–ù–µ—Ç –º–∞—Ç—á–µ–π –≤ –ª–∏–≥–µ {league_info['name']}*\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ª–∏–≥—É –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ!",
                parse_mode="Markdown"
            )
            return
            
        await callback.message.answer(
            f"üèÜ *–ú–∞—Ç—á–∏ {league_info['emoji']} {league_info['name']}*\n"
            f"üìä –ù–∞–π–¥–µ–Ω–æ: {len(data)} –º–∞—Ç—á–µ–π",
            parse_mode="Markdown"
        )
        
        for m in data[:5]:
            match_text = format_match_message(m)
            await callback.message.answer(match_text, parse_mode="Markdown")
            
    except Exception as e:
        await callback.message.answer("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ç—á–µ–π –ª–∏–≥–∏*", parse_mode="Markdown")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–£–†–ù–ò–†–ù–´–• –¢–ê–ë–õ–ò–¶ ---
@dp.callback_query(lambda c: c.data.startswith("table_"))
async def process_table_select(callback: types.CallbackQuery):
    league_key = callback.data.replace("table_", "")
    
    league_names = {
        "premier_league": "üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞ –ê–Ω–≥–ª–∏—è",
        "la_liga": "üá™üá∏ –õ–∞ –õ–∏–≥–∞ –ò—Å–ø–∞–Ω–∏—è",
        "serie_a": "üáÆüáπ –°–µ—Ä–∏—è –ê –ò—Ç–∞–ª–∏—è", 
        "bundesliga": "üá©üá™ –ë—É–Ω–¥–µ—Å–ª–∏–≥–∞ –ì–µ—Ä–º–∞–Ω–∏—è"
    }
    
    league_name = league_names.get(league_key)
    if not league_name:
        await callback.answer("‚ùå –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    table_data = get_league_table(league_key)
    if not table_data:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    table_text = format_table_message(league_name, table_data)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìä –î—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã", callback_data="tables_menu")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await callback.message.answer(table_text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò ---
@dp.callback_query(lambda c: c.data == "stats_scorers")
async def process_stats_scorers(callback: types.CallbackQuery):
    scorers = get_top_scorers(5)
    stats_text = format_stats_message("scorers", scorers)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìà –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="stats_menu")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await callback.message.answer(stats_text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "stats_assists")
async def process_stats_assists(callback: types.CallbackQuery):
    assists = get_top_assists(5)
    stats_text = format_stats_message("assists", assists)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìà –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="stats_menu")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await callback.message.answer(stats_text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "stats_discipline")
async def process_stats_discipline(callback: types.CallbackQuery):
    discipline = get_discipline_stats(5)
    stats_text = format_stats_message("discipline", discipline)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìà –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="stats_menu")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await callback.message.answer(stats_text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "stats_defense")
async def process_stats_defense(callback: types.CallbackQuery):
    defense = get_defense_stats(5)
    stats_text = format_stats_message("defense", defense)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìà –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", callback_data="stats_menu")
    kb.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(1)
    
    await callback.message.answer(stats_text, reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–°–¢–†–û–ï–ö ---
@dp.callback_query(lambda c: c.data == "enable_notifications")
async def process_enable_notifications(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_notifications[user_id] = True
    await callback.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    await callback.message.answer(
        "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!*\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
        "‚Ä¢ üìÖ –ù–∞—á–∞–ª–µ –º–∞—Ç—á–µ–π\n"
        "‚Ä¢ ‚≠ê –ú–∞—Ç—á–∞—Ö –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "‚Ä¢ üéØ –í–∞–∂–Ω—ã—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö",
        parse_mode="Markdown"
    )

@dp.callback_query(lambda c: c.data == "disable_notifications")
async def process_disable_notifications(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user_notifications[user_id] = False
    await callback.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
    await callback.message.answer(
        "üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã*\n\n"
        "–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
        "–í–∫–ª—é—á–∏—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
        parse_mode="Markdown"
    )

@dp.callback_query(lambda c: c.data == "main_menu")
async def process_main_menu(callback: types.CallbackQuery):
    await callback.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await cmd_start(callback.message)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò API ---
def run_api():
    uvicorn.run(app, host="0.0.0.0", port=8080)

async def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await set_bot_commands()
    await set_group_commands()
    
    # –ó–∞–ø—É—Å–∫ API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    t_api = threading.Thread(target=run_api, daemon=True)
    t_api.start()
    log.info("üåê FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
