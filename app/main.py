import os
import logging
import threading
import asyncio
from datetime import datetime, timedelta
import hmac
import hashlib
import json

import requests
from fastapi import FastAPI, Request
from fastapi.responses import FileResponse, JSONResponse
import uvicorn

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
API_SPORT_KEY = os.getenv("API_SPORT_KEY")
WEBAPP_URL = os.getenv("WEBAPP_URL", "").strip()

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
if not API_SPORT_KEY:
    raise RuntimeError("API_SPORT_KEY –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
log = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# --- –ü–†–û–í–ï–†–ö–ê INITDATA ---
def validate_init_data(init_data: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram Web App initData"""
    try:
        pairs = init_data.split('&')
        data_dict = {}
        hash_value = None
        
        for pair in pairs:
            key, value = pair.split('=', 1)
            if key == 'hash':
                hash_value = value
            else:
                data_dict[key] = value
        
        if not hash_value:
            return False
        
        check_string = '\n'.join([f"{k}={data_dict[k]}" for k in sorted(data_dict.keys())])
        
        secret_key = hmac.new(
            key=b"WebAppData",
            msg=TELEGRAM_BOT_TOKEN.encode(),
            digestmod=hashlib.sha256
        ).digest()
        
        calculated_hash = hmac.new(
            key=secret_key,
            msg=check_string.encode(),
            digestmod=hashlib.sha256
        ).hexdigest()
        
        return calculated_hash == hash_value
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ initData: {e}")
        return False

# --- –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ WEB APP ---
@app.get("/")
def index():
    return FileResponse("app/webapp/index.html")

@app.get("/style.css")
def style():
    return FileResponse("app/webapp/style.css")

@app.get("/app.js")
def app_js():
    return FileResponse("app/webapp/app.js")

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ú–ê–¢–ß–ê–• ---
def get_matches_data():
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        today = datetime.utcnow().strftime("%Y-%m-%d")
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –°–û–ì–õ–ê–°–ù–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
        params = {
            "date": today  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        }
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ï –ó–ê–ì–û–õ–û–í–ö–ò –°–û–ì–õ–ê–°–ù–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
        headers = {
            "Authorization": API_SPORT_KEY  # –ö–ª—é—á –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization
        }
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô URL –°–û–ì–õ–ê–°–ù–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
        url = "https://api.api-sport.ru/v1/football/matches"
        
        log.info(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: {url}")
        log.info(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: {params}")
        log.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: Authorization: ***")
        
        resp = requests.get(url, headers=headers, params=params, timeout=10)
        
        # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê
        log.info(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status_code}")
        log.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(resp.headers)}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞
        response_preview = resp.text[:500] + "..." if len(resp.text) > 500 else resp.text
        log.info(f"üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {response_preview}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not resp.text.strip():
            log.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            return JSONResponse(
                status_code=500,
                content={"error": "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
        if resp.status_code == 401:
            log.error("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
            return JSONResponse(
                status_code=401,
                content={"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"}
            )
        elif resp.status_code == 403:
            log.error("‚ùå –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return JSONResponse(
                status_code=403,
                content={"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã API"}
            )
        elif resp.status_code == 404:
            log.error("‚ùå –û—à–∏–±–∫–∞ 404: API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return JSONResponse(
                status_code=404,
                content={"error": "API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            )
        elif resp.status_code != 200:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ HTTP {resp.status_code}")
            return JSONResponse(
                status_code=resp.status_code,
                content={"error": f"–û—à–∏–±–∫–∞ API: {resp.status_code}"}
            )
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON
        try:
            data = resp.json()
            
            # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –î–ê–ù–ù–´–• –°–û–ì–õ–ê–°–ù–û –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
            matches = data.get("matches", [])
            total_matches = data.get("totalMatches", 0)
            
            log.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ {total_matches} –º–∞—Ç—á–µ–π")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞
            now = datetime.utcnow()
            two_hours_later = now + timedelta(hours=2)
            
            filtered_matches = []
            for match in matches:
                start_timestamp = match.get("startTimestamp")
                if start_timestamp:
                    start_time = datetime.fromtimestamp(start_timestamp / 1000)
                    if now <= start_time <= two_hours_later:
                        filtered_matches.append(match)
            
            log.info(f"üìä –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {len(filtered_matches)} –º–∞—Ç—á–µ–π")
            
            return JSONResponse(content={
                "data": filtered_matches,
                "total": len(filtered_matches),
                "today_total": total_matches
            })
            
        except json.JSONDecodeError as e:
            log.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
            log.error(f"üìÑ –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞: {resp.text}")
            return JSONResponse(
                status_code=500,
                content={"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç API"}
            )
            
    except requests.exceptions.Timeout:
        log.error("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API")
        return JSONResponse(
            status_code=504,
            content={"error": "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API"}
        )
    except requests.exceptions.ConnectionError:
        log.error("üîå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API")
        return JSONResponse(
            status_code=503,
            content={"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"}
        )
    except Exception as e:
        log.exception("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_matches_data")
        return JSONResponse(
            status_code=500,
            content={"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(e)}"}
        )

# --- API ENDPOINTS ---
@app.get("/api/matches")
def api_matches(request: Request):
    """Endpoint –¥–ª—è Mini App —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π initData"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        init_data = request.headers.get("X-Telegram-Init-Data")
        
        if not init_data:
            return JSONResponse(
                status_code=401,
                content={"error": "initData –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º initData
        if not validate_init_data(init_data):
            return JSONResponse(
                status_code=401,
                content={"error": "–ù–µ–≤–µ—Ä–Ω—ã–π initData"}
            )
        
        return get_matches_data()
        
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –≤ api_matches")
        return JSONResponse(status_code=500, content={"error": str(e)})

@app.get("/api/internal/matches")
def api_internal_matches():
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π endpoint –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ initData"""
    try:
        return get_matches_data()
    except Exception as e:
        log.exception("–û—à–∏–±–∫–∞ –≤ api_internal_matches")
        return JSONResponse(status_code=500, content={"error": str(e)})

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = InlineKeyboardBuilder()
    
    # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    kb.button(text="üìÖ –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç—á–∏", callback_data="get_matches")
    kb.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="get_matches") 
    kb.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    kb.adjust(2, 1)
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π.\n\n"
        "‚öΩ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/matches - –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

@dp.message(Command("matches"))
async def cmd_matches(message: types.Message):
    await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏...")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π endpoint
        internal_url = "http://127.0.0.1:8080/api/internal/matches"
        log.info(f"üîÑ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∫: {internal_url}")
        
        resp = requests.get(internal_url, timeout=10)
        
        if resp.status_code != 200:
            try:
                error_data = resp.json()
                error_msg = error_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            except:
                error_msg = f"HTTP –æ—à–∏–±–∫–∞ {resp.status_code}"
            
            # –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
            if "API –∫–ª—é—á" in error_msg or "401" in error_msg:
                await message.answer("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            elif "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç" in error_msg:
                await message.answer("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            elif "—Ç–∞–π–º–∞—É—Ç" in error_msg.lower() or "timeout" in error_msg.lower():
                await message.answer("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API.")
            elif "–ø–æ–¥–∫–ª—é—á–µ–Ω–∏" in error_msg.lower() or "connection" in error_msg.lower():
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API.")
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ API: {error_msg}")
            return
            
        data = resp.json().get("data", [])
        
        if not data:
            await message.answer("‚öΩ –ù–µ—Ç –º–∞—Ç—á–µ–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞.")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–∞—Ç—á–µ–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram)
        for m in data[:5]:
            tournament = m.get("tournament", {})
            league = tournament.get("name", "‚Äî")
            
            home_team = m.get("homeTeam", {})
            away_team = m.get("awayTeam", {})
            home_name = home_team.get("name", "Home")
            away_name = away_team.get("name", "Away")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º–æ–µ –≤—Ä–µ–º—è
            start_timestamp = m.get("startTimestamp")
            if start_timestamp:
                start_time = datetime.fromtimestamp(start_timestamp / 1000)
                time_str = start_time.strftime("%H:%M")
            else:
                time_str = "‚Äî"
            
            text = f"üèÜ <b>{league}</b>\n‚öΩ {home_name} vs {away_name}\nüïí {time_str}"
            await message.answer(text, parse_mode="HTML")
            
        if len(data) > 5:
            await message.answer(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {len(data)} –º–∞—Ç—á–µ–π")
            
    except Exception as e:
        log.error(f"üí• –û—à–∏–±–∫–∞ –≤ cmd_matches: {e}")
        await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π")

@dp.callback_query(lambda c: c.data == "get_matches")
async def process_callback(callback: types.CallbackQuery):
    await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º–∞—Ç—á–∏...")
    await cmd_matches(callback.message)

@dp.callback_query(lambda c: c.data == "help")
async def process_help(callback: types.CallbackQuery):
    await callback.message.answer(
        "ü§ñ *Ludic Bot Help*\n\n"
        "‚öΩ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n" 
        "/matches - –ü–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏\n\n"
        "üìä *–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:*\n"
        "- –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π\n"
        "- –ë–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞\n"
        "- –†–∞–∑–Ω—ã–µ –ª–∏–≥–∏ –∏ —Ç—É—Ä–Ω–∏—Ä—ã\n\n"
        "üõ† *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*\n"
        "–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Mini App –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        parse_mode="Markdown"
    )
    await callback.answer()

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –ò API ---
def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    asyncio.run(dp.start_polling(bot))

def run_api():
    """–ó–∞–ø—É—Å–∫ FastAPI"""
    uvicorn.run(app, host="0.0.0.0", port=8080)

if __name__ == "__main__":
    log.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º API —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    log.info(f"üîë WEBAPP_URL: {WEBAPP_URL}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    t_api = threading.Thread(target=run_api, daemon=True)
    t_api.start()
    log.info("üåê FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    run_bot()
