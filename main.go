package main

import (
	"log"
	"os"
	"fmt"
	"time"
	"net/http"
	"io/ioutil"
	"encoding/json"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ API-FOOTBALL
type Team struct {
	Name string `json:"name"`
}

type Teams struct {
	Home Team `json:"home"`
	Away Team `json:"away"`
}

type Fixture struct {
	Date string `json:"date"` // –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
}

type MatchDetail struct {
	Fixture Fixture `json:"fixture"`
	Teams   Teams   `json:"teams"`
}

type APIResponse struct {
	Response []MatchDetail `json:"response"`
}

func main() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	if botToken == "" {
		log.Panic("TELEGRAM_BOT_TOKEN environment variable not set")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message)
		} else if update.CallbackQuery != nil {
			handleCallbackQuery(bot, update.CallbackQuery)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	if !message.IsCommand() {
		return
	}

	msg := tgbotapi.NewMessage(message.Chat.ID, "")

	switch message.Command() {
	case "start":
		msg.Text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
		msg.ReplyMarkup = createMainMenu()
	default:
		msg.Text = "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É."
	}

	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}
}

func handleCallbackQuery(bot *tgbotapi.BotAPI, callbackQuery *tgbotapi.CallbackQuery) {
	callback := tgbotapi.NewCallback(callbackQuery.ID, "–û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")

	if _, err := bot.Request(callback); err != nil {
		log.Println(err)
	}

	if callbackQuery.Data == "nearest_matches" {
		sendMatches(bot, callbackQuery.Message.Chat.ID)
	}
}

// –°–æ–∑–¥–∞–µ—Ç Inline-–∫–Ω–æ–ø–∫–∏
func createMainMenu() tgbotapi.InlineKeyboardMarkup {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚öΩ –ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏ (2—á)", "nearest_matches"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonURL("–°–∞–π—Ç API Football", "https://rapidapi.com/api-sports/api/api-football/"),
		),
	)
	return keyboard
}

// -----------------------------------------------------------------------------------
// –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ú–ê–¢–ß–ï–ô
// -----------------------------------------------------------------------------------

func sendMatches(bot *tgbotapi.BotAPI, chatID int64) {
	// 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	apiKey := os.Getenv("API_FOOTBALL_KEY")
	if apiKey == "" {
		msg := tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞: –ö–ª—é—á API_FOOTBALL_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		bot.Send(msg)
		return
	}

	// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω (—Å–µ–≥–æ–¥–Ω—è). API-FOOTBALL —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –¥–∞—Ç–µ.
	today := time.Now().Format("2006-01-02")
	// –ü—Ä–∏–º–µ—Ä: –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–∫—Å—Ç—É—Ä—ã (–º–∞—Ç—á–∏) –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –õ–ò–ì–ò 39 (–ê–Ω–≥–ª–∏–π—Å–∫–∞—è –ü—Ä–µ–º—å–µ—Ä-–ª–∏–≥–∞)
	apiURL := fmt.Sprintf("https://api-football-v1.p.rapidapi.com/v3/fixtures?date=%s&league=39&season=2024", today) 
	
	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		log.Printf("Error creating request: %v", err)
		return
	}
	
	// 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è RapidAPI
	req.Header.Add("X-RapidAPI-Key", apiKey)
	req.Header.Add("X-RapidAPI-Host", "api-football-v1.p.rapidapi.com")
	
	client := http.Client{Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	
	msgText := ""

	if err != nil {
		log.Printf("Error fetching API: %v", err)
		msgText = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –º–∞—Ç—á–µ–π."
	} else {
		defer resp.Body.Close()
		
		body, _ := ioutil.ReadAll(resp.Body)
		var apiResponse APIResponse
		
		if resp.StatusCode != http.StatusOK {
			log.Printf("API returned status %d. Body: %s", resp.StatusCode, string(body))
			msgText = fmt.Sprintf("–û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å %d. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á.", resp.StatusCode)
		} else if err := json.Unmarshal(body, &apiResponse); err != nil {
			log.Printf("Error decoding JSON: %v. Body: %s", err, string(body))
			msgText = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π."
		} else {
			msgText = filterAndFormatMatches(apiResponse.Response)
		}
	}
	
	msg := tgbotapi.NewMessage(chatID, msgText)
	msg.ParseMode = "Markdown"
	if _, err := bot.Send(msg); err != nil {
		log.Println(err)
	}
}

// –§–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Ç—á–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞
func filterAndFormatMatches(matches []MatchDetail) string {
	now := time.Now().UTC()
	twoHoursLater := now.Add(2 * time.Hour)
	
	result := "‚öΩÔ∏è *–ë–ª–∏–∂–∞–π—à–∏–µ –º–∞—Ç—á–∏ (–≤ —Ç–µ—á–µ–Ω–∏–µ 2 —á–∞—Å–æ–≤):*\n\n"
	found := false

	// –®–∞–±–ª–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ API-Football: "2006-01-02T15:04:05+00:00"
	const apiTimeLayout = "2006-01-02T15:04:05-07:00" 

	for _, match := range matches {
		matchTime, err := time.Parse(apiTimeLayout, match.Fixture.Date)

		if err != nil {
			log.Printf("Error parsing time: %v for date: %s", err, match.Fixture.Date)
			continue
		}
		
		// –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Ç—á–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Ä–µ–º–µ–Ω–∏ (API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç UTC, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å UTC)
		if matchTime.After(now) && matchTime.Before(twoHoursLater) {
			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
			localTime := matchTime.In(time.FixedZone("MSK", 3*60*60)) 

			result += fmt.Sprintf("üïî %s: **%s** vs **%s**\n", 
				localTime.Format("15:04 MSK"), 
				match.Teams.Home.Name, 
				match.Teams.Away.Name)
			found = true
		}
	}

	if !found {
		return "–ù–µ—Ç –º–∞—Ç—á–µ–π, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞."
	}
	return result
}
